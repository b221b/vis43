при стартовой загрузке страницы сразу выводи все записи и добавь в метод index кнопку "отобразить все записи",
как тут:
```
<?php

use yii\helpers\Html;
use yii\widgets\ActiveForm;
use yii\data\ActiveDataProvider;
use app\models\Sportsmen;
use app\models\VidSporta;

$this->title = 'Запрос спортсменов';
$this->params['breadcrumbs'][] = $this->title;

?>

<div class="sportsmen-index">

    <h1><?= Html::encode($this->title) ?></h1>

    <div class="sportsmen-form">

        <?php $form = ActiveForm::begin(); ?>

        <?= $form->field($model, 'razryad')->textInput(['type' => 'number', 'placeholder' => 'Введите разряд']) ?>

        <?= $form->field($model, 'id_vid_sporta')->dropDownList(
            \yii\helpers\ArrayHelper::map($vidSportaList, 'id', 'name'), // Предполагается, что в таблице vid_sporta есть поле 'name'
            ['prompt' => 'Выберите вид спорта']
        ) ?>

        <div class="form-group">
            <?= Html::submitButton('Поиск', ['class' => 'btn btn-primary']) ?>
            <?= Html::a('Показать всех спортсменов', ['index'], ['class' => 'btn btn-default']) ?>
        </div>

        <?php ActiveForm::end(); ?>

    </div>

    <h2>Список спортсменов:</h2>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Разряд</th>
                <th>Вид спорта</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($dataProvider->models as $sportsman): ?>
                <tr>
                    <td><?= Html::encode($sportsman->name) ?></td>
                    <td><?= Html::encode($sportsman->razryad) ?></td>
                    <td>
                        <?php
                        // Получаем виды спорта для каждого спортсмена
                        $vidSportaNames = [];
                        foreach ($sportsman->sportsmenVidSporta as $relation) {
                            $vidSportaNames[] = $relation->vidSporta->name; // Предполагается, что в VidSporta есть поле 'name'
                        }
                        echo Html::encode(implode(', ', $vidSportaNames));
                        ?>
                    </td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>

</div>
```

PrizerController.php:
```
<?php

namespace app\controllers;

use Yii;
use yii\web\Controller;
use app\models\Sorevnovaniya;
use app\models\SportsmenPrizer;
use app\models\Sportsmen;
use app\models\Prizer;
use yii\data\ActiveDataProvider;

class PrizerController extends Controller
{
    public function actionIndex()
    {
        $model = new \yii\base\DynamicModel(['sorevnovanie_id']);
        $model->addRule(['sorevnovanie_id'], 'required', ['message' => 'Пожалуйста, выберите соревнование.']);

        $sorevnovaniya = Sorevnovaniya::find()->all();
        $prizers = [];

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $sorevnovanie_id = $model->sorevnovanie_id;

            $prizers = (new \yii\db\Query())
                ->select(['s.name AS sportsman_name', 'ss.name AS sorevnovanie_name', 'p.mesto', 'p.nagrada'])
                ->from('prizer p')
                ->innerJoin('sportsmen_prizer sp', 'sp.id_prizer = p.id')
                ->innerJoin('sportsmen s', 's.id = sp.id_sportsmen')
                ->innerJoin('sorevnovaniya ss', 'ss.id_prizer = p.id')
                ->where(['ss.id' => $sorevnovanie_id])
                ->all();
        }

        return $this->render('index', [
            'model' => $model,
            'sorevnovaniya' => $sorevnovaniya,
            'prizers' => $prizers,
        ]);
    }
}
```

index.php:
```
<?php

use yii\helpers\Html;
use yii\widgets\ActiveForm;

$this->title = 'Список призеров';
?>

<h1><?= Html::encode($this->title) ?></h1>

<div class="prizer-form">

    <?php $form = ActiveForm::begin(); ?>

    <?= $form->field($model, 'sorevnovanie_id')->dropDownList(
        \yii\helpers\ArrayHelper::map($sorevnovaniya, 'id', 'name'),
        ['prompt' => 'Выберите соревнование']
    ) ?>

    <div class="form-group">
        <?= Html::submitButton('Показать призеров', ['class' => 'btn btn-primary']) ?>
    </div>

    <?php ActiveForm::end(); ?>

</div>

<?php if (!empty($prizers)): ?>
    <h2>Призеры</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Спортсмен</th>
                <th>Соревнование</th>
                <th>Место</th>
                <th>Награда</th>
            </tr>
        </thead>
        <tbody>
            <?php foreach ($prizers as $prizer): ?>
                <tr>
                    <td><?= Html::encode($prizer['sportsman_name']) ?></td>
                    <td><?= Html::encode($prizer['sorevnovanie_name']) ?></td>
                    <td><?= Html::encode($prizer['mesto']) ?></td>
                    <td><?= Html::encode($prizer['nagrada']) ?></td>
                </tr>
            <?php endforeach; ?>
        </tbody>
    </table>
<?php endif; ?>
```

--------------------------------------------
--------------------------------------------
--------------------------------------------

мне нужно что бы ты немного изменил структуру запроса в моем коде, если в таблице sportsmen_sorevnovaniya есть запись для id_sportsmen соответствующая записи id_sorevnovaniya, значит спортсмен участвовал в соревновании, если такой записи нет, значит спортсмен не мог занять призовое место в соревновании. так же мне нужно сделать так, что бы у каждого соревнования было 3 призовых места. подскажи че мне сделать для этого. мне нужно это реализовать без изменений структуры моей бд.

PrizerController.php:
```
<?php

namespace app\controllers;

use Yii;
use yii\web\Controller;
use app\models\Sorevnovaniya;
use app\models\SportsmenPrizer;
use app\models\Sportsmen;
use app\models\Prizer;
use yii\data\ActiveDataProvider;

class PrizerController extends Controller
{
    public function actionIndex()
    {
        $model = new \yii\base\DynamicModel(['sorevnovanie_id']);
        $model->addRule(['sorevnovanie_id'], 'required', ['message' => 'Пожалуйста, выберите соревнование.']);

        $sorevnovaniya = Sorevnovaniya::find()->all();
        $prizers = [];

        // Получаем всех призеров при первой загрузке страницы
        $prizers = (new \yii\db\Query())
            ->select(['s.name AS sportsman_name', 'ss.name AS sorevnovanie_name', 'p.mesto', 'p.nagrada'])
            ->from('prizer p')
            ->innerJoin('sportsmen_prizer sp', 'sp.id_prizer = p.id')
            ->innerJoin('sportsmen s', 's.id = sp.id_sportsmen')
            ->innerJoin('sorevnovaniya ss', 'ss.id_prizer = p.id')
            ->all();

        // Обработка формы для фильтрации по соревнованию
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            $sorevnovanie_id = $model->sorevnovanie_id;

            $prizers = (new \yii\db\Query())
                ->select(['s.name AS sportsman_name', 'ss.name AS sorevnovanie_name', 'p.mesto', 'p.nagrada'])
                ->from('prizer p')
                ->innerJoin('sportsmen_prizer sp', 'sp.id_prizer = p.id')
                ->innerJoin('sportsmen s', 's.id = sp.id_sportsmen')
                ->innerJoin('sorevnovaniya ss', 'ss.id_prizer = p.id')
                ->where(['ss.id' => $sorevnovanie_id])
                ->all();
        }

        return $this->render('index', [
            'model' => $model,
            'sorevnovaniya' => $sorevnovaniya,
            'prizers' => $prizers,
        ]);
    }
}
```

моя структура бд:
-- База данных: sportOrg

-- Структура таблицы org
CREATE TABLE `org` (
  `id` int NOT NULL,
  `fio` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы org_sorevnovaniya
CREATE TABLE `org_sorevnovaniya` (
  `id` int NOT NULL,
  `id_org` int NOT NULL,
  `id_sorevnovaniya` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы prizer
CREATE TABLE `prizer` (
  `id` int NOT NULL,
  `mesto` int NOT NULL,
  `nagrada` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sorevnovaniya
CREATE TABLE `sorevnovaniya` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL,
  `id_structure` int NOT NULL,
  `id_vid_sporta` int NOT NULL,
  `data_provedeniya` date NOT NULL,
  `id_prizer` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sportsmen
CREATE TABLE `sportsmen` (
  `id` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `razryad` int NOT NULL,
  `id_sport_club` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы `sportsmen_prizer`

CREATE TABLE `sportsmen_prizer` (
  `id` int NOT NULL,
  `id_sportsmen` int NOT NULL,
  `id_prizer` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sportsmen_sorevnovaniya
CREATE TABLE `sportsmen_sorevnovaniya` (
  `id` int NOT NULL,
  `id_sportsmen` int NOT NULL,
  `id_sorevnovaniya` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sportsmen_treners
CREATE TABLE `sportsmen_treners` (
  `id` int NOT NULL,
  `id_sportsmen` int NOT NULL,
  `id_treners` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sportsmen_vidSporta
CREATE TABLE `sportsmen_vidSporta` (
  `id` int NOT NULL,
  `id_sportsmen` int NOT NULL,
  `id_vid_sporta` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы sport_club
CREATE TABLE `sport_club` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы structure
CREATE TABLE `structure` (
  `id` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы structure_chars
CREATE TABLE `structure_chars` (
  `id` int NOT NULL,
  `id_structure` int NOT NULL,
  `vmestimost` int DEFAULT NULL,
  `tip_pokritiya` varchar(255) DEFAULT NULL,
  `kolvo_oborydovaniya` int DEFAULT NULL,
  `kolvo_tribun` int DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы treners
CREATE TABLE `treners` (
  `id` int NOT NULL,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Структура таблицы vid_sporta
CREATE TABLE `vid_sporta` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL,
  `id_treners` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Связи

-- Ограничения внешнего ключа сохраненных таблиц

-- Ограничения внешнего ключа таблицы `org_sorevnovaniya`
ALTER TABLE `org_sorevnovaniya`
  ADD CONSTRAINT `org_sorevnovaniya_ibfk_1` FOREIGN KEY (`id_org`) REFERENCES `org` (`id`),
  ADD CONSTRAINT `org_sorevnovaniya_ibfk_2` FOREIGN KEY (`id_sorevnovaniya`) REFERENCES `sorevnovaniya` (`id`);

-- Ограничения внешнего ключа таблицы `sorevnovaniya`
ALTER TABLE `sorevnovaniya`
  ADD CONSTRAINT `sorevnovaniya_ibfk_1` FOREIGN KEY (`id_structure`) REFERENCES `structure` (`id`),
  ADD CONSTRAINT `sorevnovaniya_ibfk_2` FOREIGN KEY (`id_vid_sporta`) REFERENCES `vid_sporta` (`id`),
  ADD CONSTRAINT `sorevnovaniya_ibfk_4` FOREIGN KEY (`id_prizer`) REFERENCES `prizer` (`id`);

-- Ограничения внешнего ключа таблицы `sportsmen`
ALTER TABLE `sportsmen`
  ADD CONSTRAINT `sportsmen_ibfk_1` FOREIGN KEY (`id_sport_club`) REFERENCES `sport_club` (`id`);

-- Ограничения внешнего ключа таблицы `sportsmen_prizer`
ALTER TABLE `sportsmen_prizer`
  ADD CONSTRAINT `sportsmen_prizer_ibfk_1` FOREIGN KEY (`id_sportsmen`) REFERENCES `sportsmen` (`id`),
  ADD CONSTRAINT `sportsmen_prizer_ibfk_2` FOREIGN KEY (`id_prizer`) REFERENCES `prizer` (`id`);

-- Ограничения внешнего ключа таблицы `sportsmen_sorevnovaniya`
ALTER TABLE `sportsmen_sorevnovaniya`
  ADD CONSTRAINT `sportsmen_sorevnovaniya_ibfk_2` FOREIGN KEY (`id_sportsmen`) REFERENCES `sportsmen` (`id`),
  ADD CONSTRAINT `sportsmen_sorevnovaniya_ibfk_3` FOREIGN KEY (`id_sorevnovaniya`) REFERENCES `sorevnovaniya` (`id`);

-- Ограничения внешнего ключа таблицы `sportsmen_treners`
ALTER TABLE `sportsmen_treners`
  ADD CONSTRAINT `sportsmen_treners_ibfk_1` FOREIGN KEY (`id_sportsmen`) REFERENCES `sportsmen` (`id`),
  ADD CONSTRAINT `sportsmen_treners_ibfk_2` FOREIGN KEY (`id_treners`) REFERENCES `treners` (`id`);

-- Ограничения внешнего ключа таблицы `sportsmen_vidSporta`
ALTER TABLE `sportsmen_vidSporta`
  ADD CONSTRAINT `sportsmen_vidsporta_ibfk_1` FOREIGN KEY (`id_sportsmen`) REFERENCES `sportsmen` (`id`),
  ADD CONSTRAINT `sportsmen_vidsporta_ibfk_2` FOREIGN KEY (`id_vid_sporta`) REFERENCES `vid_sporta` (`id`);

-- Ограничения внешнего ключа таблицы `structure_chars`
ALTER TABLE `structure_chars`
  ADD CONSTRAINT `structure_chars_ibfk_1` FOREIGN KEY (`id_structure`) REFERENCES `structure` (`id`);

-- Ограничения внешнего ключа таблицы `vid_sporta`
ALTER TABLE `vid_sporta`
  ADD CONSTRAINT `vid_sporta_ibfk_1` FOREIGN KEY (`id_treners`) REFERENCES `treners` (`id`);
COMMIT;