Задание 2

```
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import warnings

warnings.filterwarnings('ignore')

# Загрузить данные
data = pd.read_csv('monthly-beer-production-in-austr.csv')

# Преобразование столбца Month в формат даты
data['Month'] = pd.to_datetime(data['Month'], format='%Y-%m')
data.set_index('Month', inplace=True)

# Посмотреть на данные
print(data.head())

# Визуализация исходных данных
plt.figure(figsize=(12, 6))
plt.plot(data.index, data['Monthly beer production'])
plt.title('Monthly Beer Production in Australia')
plt.xlabel('Date')
plt.ylabel('Production')
plt.grid(True)
plt.show()

# Создаем дополнительные признаки
data['Year'] = data.index.year
data['Month_num'] = data.index.month

# Создаем lag признаки
for lag in range(1, 13):  # Добавить лаги за последние 12 месяцев
    data[f'Lag_{lag}'] = data['Monthly beer production'].shift(lag)

# Убираем строки с пустыми значениями
data.dropna(inplace=True)

# Определяем признак X и целевую переменную y
X = data.drop(columns='Monthly beer production')
y = data['Monthly beer production']

# Разделение на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

print("Training data shape:", X_train.shape)
print("Testing data shape:", X_test.shape)

# Создание модели Random Forest
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Предсказания на тестовой выборке
y_pred = model.predict(X_test)

# Оценка производительности
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Визуализация предсказаний
plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test, label='Actual Production', marker='o')
plt.plot(y_test.index, y_pred, label='Predicted Production', marker='o')
plt.title('Beer Production: Actual vs Predicted')
plt.xlabel('Date')
plt.ylabel('Production')
plt.legend()
plt.grid(True)
plt.show()

```

давай в этот код добавим lstm и после SimpleRNN, Прогнозирование на основе многомерного временного ряда, Точечное прогнозирование, Интервальное прогнозирование
по датасету monthly-beer-production-in-austr.csv:
```
Month,Monthly beer production
1956-01,93.2
1956-02,96
1956-03,95.2
1956-04,77.1
1956-05,70.9
```