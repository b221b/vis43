с этим кодом
```
import os
import tensorflow as tf
import matplotlib.pyplot as plt
import pathlib

data_dir = pathlib.Path("PetImages")

# Удаляем испорченные изображения
num_skipped = 0
for folder_name in ("cat", "dog"):
    folder_path = os.path.join(data_dir, folder_name)
    for fname in os.listdir(folder_path):
        fpath = os.path.join(folder_path, fname)
        try:
            fobj = open(fpath, "rb")
            is_jfif = tf.compat.as_bytes("JFIF") in fobj.peek(10)
        finally:
            fobj.close()

        if not is_jfif:
            num_skipped += 1
            os.remove(fpath)

print("Deleted %d images" % num_skipped)

image_size = (150, 150)
batch_size = 32

train_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="training",
    seed=42,
    image_size=image_size,
    batch_size=batch_size,
)

val_ds = tf.keras.utils.image_dataset_from_directory(
    data_dir,
    validation_split=0.2,
    subset="validation",
    seed=42,
    image_size=image_size,
    batch_size=batch_size,
)

# Применяем аугментацию данных
data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal_and_vertical"),
    tf.keras.layers.RandomRotation(0.2),
    tf.keras.layers.RandomZoom(0.2),
])

# Визуализация аугментации
plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
    for i in range(9):
        ax = plt.subplot(3, 3, i + 1)
        augmented_image = data_augmentation(images[i:i+1])
        plt.imshow(augmented_image[0].numpy().astype("uint8"))
        plt.axis("off")

# Загрузка предобученной модели
base_model = tf.keras.applications.MobileNetV2(input_shape=(150, 150, 3), include_top=False, weights='imagenet')
base_model.trainable = True  # Размораживаем базовую модель

# Размораживаем последние 20 слоев
for layer in base_model.layers[-20:]:
    layer.trainable = True

# Создание новой модели
model = tf.keras.models.Sequential([
    data_augmentation,
    tf.keras.layers.Rescaling(1.0 / 255),
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  # Для бинарной классификации
])

model.compile(loss=tf.keras.losses.binary_crossentropy,
              optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4),  # Уменьшение скорости обучения
              metrics=['accuracy'])
model.summary()

# Обратные вызовы для сохранения модели и ранней остановки
early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)
model_checkpoint = tf.keras.callbacks.ModelCheckpoint('best_model.keras', save_best_only=True, monitor='val_accuracy')

# Обучение модели
history = model.fit(train_ds, validation_data=val_ds, epochs=100, verbose=1, callbacks=[early_stopping, model_checkpoint])

# Оценка модели
loss, accuracy = model.evaluate(val_ds)
print(f'Validation accuracy: {accuracy * 100:.2f}%')

# Визуализация кривых обучения
def plot_learning_curves(history):
    plt.figure(figsize=(10, 5))
    
    # Точность
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title('Accuracy')
    plt.xlabel('Epochs')
    plt.ylabel('Accuracy')
    plt.legend()
    
    # Потеря
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Loss')
    plt.xlabel('Epochs')
    plt.ylabel('Loss')
    plt.legend()
    
    plt.tight_layout()
    plt.show()

# Визуализация кривых обучения
plot_learning_curves(history)
```
показатели еще выросли, но немного не хватает, валидационная точность = 93%

Epoch 16/100
4/4 ━━━━━━━━━━━━━━━━━━━━ 20s 3s/step - accuracy: 0.9737 - loss: 0.0679 - val_accuracy: 0.8710 - val_loss: 0.3131
1/1 ━━━━━━━━━━━━━━━━━━━━ 2s 2s/step - accuracy: 0.9355 - loss: 0.2457
Validation accuracy: 93.55%

но нужна точность еще больше.
так же мне нужно что бы ты решил проблему - у меня валидационная точность меньше тренировочной точности и валидационные потери больше тренировочных. исправь это, валидационная точность должна быть больше тренировочной