я поменял датасет на social-media.csv с полями:
```
UserId,UsageDuraiton,Age,Country,TotalLikes
```

переделай под него код:
```
# Подключение библиотек
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

# Загрузка данных
dataset = pd.read_csv('social-media.csv')

# Определение матрицы признаков и зависимой переменной
# Предположим, что мы хотим предсказать 'MI_dir_L5_weight'
X = dataset.drop('UsageDuraiton', axis=1).values  # Все колонки, кроме целевой
y = dataset['UsageDuraiton'].values  # Целевая переменная

# Разделение данных на обучающую и тестовую выборки
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Обучение линейной модели
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)

# Обучение полиномиальной модели
degree = 2  # Вы можете изменять степень полинома для анализа
poly_reg = PolynomialFeatures(degree=degree)
X_poly = poly_reg.fit_transform(X_train)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y_train)

# Предсказание
y_pred_lin = lin_reg.predict(X_test)
y_pred_poly = lin_reg_2.predict(poly_reg.transform(X_test))

# Визуализация результатов
# Для визуализации полиномиальной регрессии можно использовать только один признак
# Предположим, что мы хотим визуализировать 'MI_dir_L5_mean' против 'MI_dir_L5_weight'
X_plot = dataset[['UsageDuraiton']].values
y_plot = dataset['Age'].values

# Линейная регрессия (используем все признаки для предсказания)
X_plot_full = np.zeros((X_plot.shape[0], X.shape[1]))  # Создаем матрицу с нулями
X_plot_full[:, 0] = X_plot.flatten()  # Заменяем первый признак на 'MI_dir_L5_mean'
y_pred_lin_full = lin_reg.predict(X_plot_full)  # Предсказание с использованием всех признаков

plt.scatter(X_plot, y_plot, color='red')
plt.plot(X_plot, y_pred_lin_full, color='blue')
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('UsageDuraiton')
plt.ylabel('Age')
plt.show()

# Полиномиальная регрессия
X_poly_plot = poly_reg.transform(X_plot)  # Преобразуем X_plot с помощью PolynomialFeatures
plt.scatter(X_plot, y_plot, color='red')
plt.plot(X_plot, lin_reg_2.predict(X_poly_plot), color='blue')
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('UsageDuraiton')
plt.ylabel('Age')
plt.show()
```